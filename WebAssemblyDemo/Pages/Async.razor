@page "/async"
@using Models;

<h1>Asynchronous Validation</h1>

<hr class="mb-5" />

<EditForm Model="@Model" OnSubmit="@SubmitForm">
    <FluentValidationValidator @ref="_validator" />
    <ValidationSummary />

    <div class="mb-3">
        <labe class="form-label">EmailAddress: </labe>
        <InputText @bind-Value="@Model.EmailAddress" class="form-control w-auto" />
        <ValidationMessage For="@(() => Model.EmailAddress )" />
    </div>

    @if (!ValidationRunning)
    {
        <div class="d-flex gap-3">
            <button class="btn btn-primary" type="submit">Save</button>

            @if (context.GetValidationMessages().Any())
            {
                <button class="btn btn-secondary" type="button" @onclick="Clear">Clear Errors</button>
            }
        </div>
    }
    else
    {
        <button class="btn btn-primary" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Validating...
        </button>
    }
</EditForm>
<br />

@code {
    FluentValidationValidator? _validator;

    [Inject] IJSRuntime JS { get; set; } = default!;

    EmailModel Model { get; set; } = new EmailModel();

    bool ValidationRunning { get; set; }


    async Task SubmitForm(EditContext editContext)
    {
        ValidationRunning = true;
        StateHasChanged();
        try
        {
            await editContext.ValidateAsync();
            var validationResult = await editContext.GetValidationResultAsync();
            if (validationResult.IsValid)
            {
                await JS.InvokeVoidAsync("alert", "Form Submitted Successfully!");
            }
        }
        finally
        {
            ValidationRunning = false;
        }
    }

    void Clear()
    {
        _validator?.ClearMessages();
    }


}